budget:
  allOf:
    - $ref: primitives.yaml/#/beanObject
  properties:
    monthlyAllocation:
      $ref: primitives.yaml/#/money
  required:
    - monthlyAllocation
category:
  allOf:
    - $ref: primitives.yaml/#/beanObject
  required:
    - name
    - group
    - transactions
  properties:
    description:
      type: string
    group:
      $ref: primitives.yaml/#/beanObject
    name:
      type: string
    transactions:
      items:
        $ref: '#/transaction'
      type: array
categoryGroup:
  allOf:
    - $ref: groups.yaml/#/genericGroup
  properties:
    children:
      items:
        anyOf:
          # Arbitrary nesting
          - $ref: '#/category'
          - $ref: '#/categoryGroup'
documentScan:
  allOf: 
    -  $ref: primitives.yaml/#/beanObject
  required:
    - file
    - ocrResult
  properties:
    file: 
      $ref: primitives.yaml/#/beanObject
    ocrResult:
      type: string
transactionGroup:
  allOf:
    - $ref: groups.yaml/#/genericGroup
  required:
    - date
    - transactionParty
    - source
  properties:
    children:
      items:
          # Only single layer allowed, in contrast to categoryGroup!
         $ref: '#/transaction'
    date:
      type: string
      format: date
    transactionParty:
      $ref: '#/transactionParty'
    source:
      oneOf:
        - const: "manual"
        - $ref: primitives.yaml/#/beanObject
transactionParty:
  allOf:
    - $ref: primitives.yaml/#/beanObject
  required:
    - partyName
  properties:
    partyName:
      type: string
expenseCategory:
  allOf:
    - $ref: '#/category'
  required:
    - budget
  properties:
    budget:
      $ref: '#/budget'
incomeCategory:
  allOf:
    - $ref: '#/category'
transaction:
  allOf:
    - $ref: primitives.yaml/#/beanObject
  properties:
    amount:
      $ref: primitives.yaml/#/money
    category:
      $ref: '#/category'
    description:
      type: string
    transactionGroup:
      type: string
  required:
    - amount
    - category
    - transactionGroup